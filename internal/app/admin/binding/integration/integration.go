package integration

import (
	"errors"
	"strings"

	dto "Synapse/internal/app/admin/integration/dto"
	"Synapse/internal/app/admin/pkg/validators"
)

// 游댳 Valida칞칚o de query param (?marca_id=)
func ValidateGetIntegracoesByMarcaID(input dto.GetIntegracoesByMarcaIDRequest) error {
	if input.MarcaID <= 0 {
		return errors.New("marca_id inv치lido ou ausente na query")
	}
	return nil
}

// 游댳 Valida칞칚o de URI param (:enterprise_id)
func ValidateGetIntegracoesByEnterpriseURI(input dto.GetIntegracoesByEnterpriseIDURI) error {
	if input.EnterpriseID <= 0 {
		return errors.New("enterprise_id inv치lido ou ausente na rota")
	}
	return nil
}

// 游댳 Valida칞칚o de JSON para cria칞칚o de v칤nculo entre empresa e integra칞칚o
func ValidateCreateIntegracaoEnterprise(input dto.CreateIntegracaoEnterpriseRequest) error {
	if input.EnterpriseID <= 0 {
		return errors.New("enterprise_id inv치lido ou ausente no corpo da requisi칞칚o")
	}
	if input.IntegracaoID <= 0 {
		return errors.New("integracao_id inv치lido ou ausente no corpo da requisi칞칚o")
	}
	return nil
}

// 游댳 Valida칞칚o de JSON para remover v칤nculo entre empresa e integra칞칚o
func ValidateDeleteIntegracaoEnterprise(input dto.DeleteIntegracaoEnterpriseRequest) error {
	if input.EnterpriseID <= 0 {
		return errors.New("enterprise_id inv치lido ou ausente")
	}
	if input.IntegracaoID <= 0 {
		return errors.New("integracao_id inv치lido ou ausente")
	}
	return nil
}

// Valida o JSON para criar vinculo entre empresa e integra칞칚o
func ValidateCreateIntegracaoUser(input dto.CreateIntegracaoUserRequest) error {
	if input.UserID <= 0 {
		return errors.New("user_id inv치lido ou ausente")
	}
	if input.IntegracaoID <= 0 {
		return errors.New("integracao_id inv치lido ou ausente")
	}
	return nil
}

// Valida CreateTokenIntegracaoRequest para criar um token de integra칞칚o
func ValidateCreateTokenIntegracao(input dto.CreateTokenIntegracaoRequest) error {
	if strings.TrimSpace(input.Email) == "" {
		return errors.New("email 칠 obrigat칩rio")
	}
	if !validators.IsEmailValid(input.Email) {
		return errors.New("email inv치lido")
	}
	if len(strings.TrimSpace(input.Senha)) < 6 {
		return errors.New("a senha deve conter pelo menos 6 caracteres")
	}
	if input.IntegracaoID <= 0 {
		return errors.New("integracao_id inv치lido ou ausente")
	}
	return nil
}
